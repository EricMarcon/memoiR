[{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Writing articles","text":"Markdown easy learn. Markdown allows integrate R code reproducible result. Markdown allows produce, without rewriting text, document different formats: HTML, LaTeX Word example.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"how-to-do-it","dir":"Articles","previous_headings":"","what":"How to do it","title":"Writing articles","text":"RStudio, create new document type Document R Markdown. wizard allows choose different formats. Click template: templates installed packages. memoiR package templates displayed: choose aither Simple Article Stylish Article. better create RStudio project benefit possibilities: File / New Project use wizard create project existing folder. Write document RStudio. Clicking Knit button RStudio generates document requested format.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"code","dir":"Articles","previous_headings":"","what":"Code","title":"Writing articles","text":"main features R Markdown summarized .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"r-code","dir":"Articles","previous_headings":"Code","what":"R code","title":"Writing articles","text":"R code included code chunks:","code":"```{r cars, echo=FALSE} head(cars) ``` head(cars) ##   speed dist ## 1     4    2 ## 2     4   10 ## 3     7    4 ## 4     7   22 ## 5     8   16 ## 6     9   10"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"tables","dir":"Articles","previous_headings":"Code","what":"Tables","title":"Writing articles","text":"horizontal - vertical separators | allow draw table according Markdown syntax, best method. Tables can also produced R code. content table dataframe. kbl() function kableExtra package (enhances original kable() function knitr) prepares table display passes result kable_styling function final formatting. Table created R caption specified caption argument referencing possible table receives label whose name tab: followed name code snippet: write something like see table \\@ref(tab:iris)). Always use booktabs = TRUE argument thickness separator lines optimal LaTeX. bootstrap_options = \"striped\" option provides readable tables HTML. LaTeX, tables can width column possibly span multiple pages, use width page. Summary disturbance intensity 4 plot treatments Paracou. table contains mathematics: escape = FALSE option necessary. Finally, full_width = FALSE option adjusts width table content instead occupying available width. must TRUE correct formatting two-column tables LaTeX.","code":"```{r iris, echo=FALSE, warning=FALSE} library(\"kableExtra\") names(iris) <- c(\"Sepal length\", \"Width\", \"Petal length\", \"Width\", \"Species\") kbl(head(iris), caption=\"Table created by R\", longtable = TRUE, booktabs = TRUE) %>%   kable_styling(bootstrap_options = \"striped\", full_width = FALSE) ``` ##  ## Attaching package: 'kableExtra' ## The following object is masked from 'package:dplyr': ##  ##     group_rows ```{r Paracou, echo=FALSE, warning=FALSE} Intervention <- data.frame(   Treatment=c(\"Control\", \"T1\", \"T2\", \"T3\"),   Timber=c(\"\",             \"DBH $\\\\geq$ 50 cm, commercial species, $\\\\approx$ 10 trees/ha\",             \"DBH $\\\\geq$ 50 cm, commercial species, $\\\\approx$ 10 trees/ha\",            \"DBH $\\\\geq$ 50 cm, commercial species, $\\\\approx$ 10 trees/ha\"),   Thinning=c(\"\",               \"\",               \"DBH $\\\\geq$ 40 cm, non-valuable species, $\\\\approx$ 30 trees/ha\",               \"DBH $\\\\geq$ 50 cm, non-valuable species, $\\\\approx$ 15 trees/ha  \"),   Fuelwood=c(\"\",               \"\",               \"\",               \"40 cm $\\\\leq$ DBH $\\\\leq$ 50 cm, non-valuable species, $\\\\approx$ 15 trees/ha\"),   AGBLost=c(0, \"$[12\\\\%-33\\\\%]$\", \"$[33\\\\%-56\\\\%]$\", \"$[35\\\\%-56\\\\%]$\") ) names(Intervention)[5] <- \"\\\\%AGB lost\" kbl(   Intervention,    caption = \"Summary of the disturbance intensity for the 4 plot treatments in Paracou.\",    longtable = FALSE,   booktabs = TRUE,    escape = FALSE ) %>%   kable_styling(bootstrap_options = \"striped\", full_width = TRUE) ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"figures","dir":"Articles","previous_headings":"Code","what":"Figures","title":"Writing articles","text":"Figures can created R code. Figure title Bookdown, label associated figure: name fig:xxx xxx name R code snippet. Cross-references made command \\@ref(fig:xxx). PDF output Stylish Articles, figure can use full width page adding following options header code snippet generates : fig.env=\"figure*\" .extra=\"\". Existing figures integrated piece code include_graphics function. figure file Systematically place files images folder automation GitHub pages.","code":"```{r pressure, fig.cap=\"Figure title\"} plot(pressure) ``` ```{r cover, fig.cap=\"A figure from a file\", echo=FALSE, out.width='60%'} knitr::include_graphics(\"images/trim.png\") ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"captions","dir":"Articles","previous_headings":"Code","what":"Captions","title":"Writing articles","text":"Figure table captions can long, include formatted text, maths, references… limit contain single paragraph. captions must stored separate paragraph starting (ref:ChunkName)space. text caption follows. figure chunk heading, caption called fig.cap field: tables, caption argument kbl() function used way.","code":"(ref:ChunkName) This *is* a figure legend. ```{r ChunkName, fig.cap=\"(ref:ChunkName)\"} plot(pressure) ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"lists","dir":"Articles","previous_headings":"Code","what":"Lists","title":"Writing articles","text":"Lists indicated *, + - (three hierarchical levels) numbers 1., . . (numbered lists). Indentation lists indicates level: *, + - may replaced - levels, four spaces needed nest list another. sub-list Second element Continuation list Leave empty line list, items.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"math","dir":"Articles","previous_headings":"Code","what":"Math","title":"Writing articles","text":"Equations LaTeX format can inserted line, like =πr2A=\\pi r^2 isolated like eiπ=−1.e^{\\pi} = -1. can numbered using equation environment: Cross referencing supported: see equation \\@ref(eq:disk).","code":"\\begin{equation}   A = \\pi r^2.   (\\#eq:disk) \\end{equation}"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"cross-references","dir":"Articles","previous_headings":"Code","what":"Cross-references","title":"Writing articles","text":"Figures tables automatically generated label, identical name code snippet prefixed fig: tab:. equations, label added manually code (\\#eq:xxx) end equation. Sections can tagged ending title {#yyy}. cases, call reference made command \\@ref().","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"bibliography","dir":"Articles","previous_headings":"Code","what":"Bibliography","title":"Writing articles","text":"Bibliographic references included references.bib file can called [@CitationKey], parentheses (Xie 2016), without square brackets, text, Xie, Allaire, Grolemund (2018) . bibliography processed Pandoc producing Word HTML documents. bibliographic style can specified, adding line document header copying .csl style file project folder. thousand styles available3. PDF documents, bibliography managed natbib. style declared header: can changed long appropriate .bst file (default: chicago.bst) included project.","code":"csl:file_name.csl biblio-style: chicago"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"specificities-of-document-types","dir":"Articles","previous_headings":"","what":"Specificities of document types","title":"Writing articles","text":"templates designed produce documents PDF, HTML Word format. Use list choices Knit button choose output format.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"html","dir":"Articles","previous_headings":"Specificities of document types","what":"HTML","title":"Writing articles","text":"writing, prefer knitting HTML format speed execution. standard HTML output formats “HTML document” “GitBook”, optimized -screen reading. specific formats rmdformats distill packages. Specific instructions apply format: GitBook: download button available document menu bar. work document also knitted PDF format file name entered download field YAML header. rmdformats: read documentation package. date item HTML header must formatted “year/month/day” interpreted correctly. current date must changed default format templates '%d %B %Y' '%Y %B %d'. sections may numbered adding specific pandoc option YAML header, cross references section numbers supported yet.","code":"output:   bookdown::html_document2:     base_format: distill::distill_article     pandoc_args: [\"--number-sections\"]"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"pdf","dir":"Articles","previous_headings":"Specificities of document types","what":"PDF","title":"Writing articles","text":"document formatted self-archiving well-formatted articles (Stylish Article) simpler, LaTeX-article-style output (Simple Article).","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"latex-preamble","dir":"Articles","previous_headings":"Specificities of document types > PDF","what":"LaTeX preamble","title":"Writing articles","text":"LaTeX commands can added preamble produced LaTeX file, example load additional packages. commands preamble: section Markdown file header. default commands allow show use hyphenation command: commands can added needed. Warning: Comments allowed. Complex commands (e.g. \\renewenvironment) must entered single line otherwise destroyed knitr first knitting HTML.","code":"\\hyphenation%   {bio-di-ver-si-ty sap-lings}"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"forcing-line-breaks","dir":"Articles","previous_headings":"Specificities of document types > PDF","what":"Forcing line breaks","title":"Writing articles","text":"Hyphenation handled automatically LaTeX. word hyphenated correctly, add hyphenation preamble file command hyphenation (words separated spaces, hyphenation locations represented dashes). LaTeX can’t find solution line break, example code long non-breaking block, add LaTeX command \\break line break location. leave space command. HTML document ignores LaTeX commands.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"languages","dir":"Articles","previous_headings":"Specificities of document types > PDF","what":"Languages","title":"Writing articles","text":"Languages declared document header. main language document (lang) changes name elements, table contents. change language document (one otherlangs) managed LaTeX HTML inserting new line following command: current language effect LaTeX output: space added double punctuation French, size spaces larger beginning sentences English, etc. \\selectlanguage command simply ignored HTML. Language codes used header, en-US language names necessary `. Name matches listed table 3 polyglossia package documentation4.","code":"\\selectlanguage{english}"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/articles.html","id":"word","dir":"Articles","previous_headings":"Specificities of document types","what":"Word","title":"Writing articles","text":"Word outputs can formatted copied template. standard text styles “First Paragraph” “Body Text” rather “Normal”. Word format allows produce manuscript journals support LaTeX. bibliographic style journal likely available .csl format, minimizes manual preparation. level 1 title References must added manually Word files.","code":""},{"path":[]},{"path":[]},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"basic-use","dir":"Articles","previous_headings":"Cover","what":"Basic use","title":"LaTeX memoir Customization","text":"Two default cover pages proposed. Either insert PDF page first page printed document, followed verso blank page. , set pdftitlepage option header index.Rmd. value path PDF file whose first page extracted. build cover based options declared maintitlepage. title authors document printed current date cover page. illustration (example can added bottom right page, declared filigrane: verso page made epigraph top credits bottom. content must written plain LaTeX rather Markdown. Build template. logo can added credits. Note maintitlepage: key must contain something taken account, use none epigraph:, credits, logo filigrane:, just write: course, one two covers kept even though template prints . Delete comment undesired option, either pdftitlepage whole maintitlepage.","code":"maintitlepage:   filigrane: images/filigrane.png maintitlepage: true"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"advanced-use","dir":"Articles","previous_headings":"Cover","what":"Advanced use","title":"LaTeX memoir Customization","text":"personal LaTeX cover, e.g. faculty thesis mandatory cover, can used redefining \\MainTitlePage LaTeX command. can done preamble.tex. minimum, ugly example: command called two parameters: content epigraph credits maintitlepage, may used: , set header index.Rmd. Note contrast template.tex,preamble.tex support parameters based header document, $title$.","code":"\\renewcommand{\\MainTitlePage}[2]{     \\SmallMargins       % Margins     \\pagestyle{empty}   % No header/footer   \\Huge\\thetitle\\\\   \\Large\\theauthor\\\\   \\normalsize\\thedate     \\clearpage     #1                  % epigraph     #2                  % credits     \\cleardoublepage     }"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"chapter-and-page-styles","dir":"Articles","previous_headings":"","what":"Chapter and page styles","title":"LaTeX memoir Customization","text":"Chapter styles define way top-level titles presented. gallery available. default chapter style template daleif1. actually supported natively memoir code added preamble.tex. proposes graphic chapter titles. works well Ruled page style, page header recalls chapter section titles. page styles described section 7.2 memoir manual. alternative companion, chapter page style employed large margin layout template.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"margins","dir":"Articles","previous_headings":"","what":"Margins","title":"LaTeX memoir Customization","text":"A4 Letter paper 1-inch margin sides imply long lines, actually long read comfortably. Avoid lines 80 characters increasing margin width. Two options used: Large margins allow narrower text column readability putting stuff . Use largemargins: true use . outer margin set largemargin: 3in spine margin may reduced bit.","code":"smallmargin: 1.5in         # outer margin (small). spinemargin: 1.5in         # spine margin. Reduce to 1.2 with large margins."},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"bibliographic-styles","dir":"Articles","previous_headings":"","what":"Bibliographic styles","title":"LaTeX memoir Customization","text":"Many bibliographic styles come biblatex, LaTeX package charge reference management. gallery available. style selected options biblatex: default style template classical author-year style, ibidem option, .e. authors repeated previous reference. large margins available, verbose-inote style appropriate reader full references close text, including DOI link. styles can used, including specific styles requiring extra LaTeX package usually installed automatically LaTeX distributions. pageref option must commented chosen style support error may occur LaTeX compilation document. verbose citations large margins wanted another bibliographic style desired, style can replaced two separate instructions citation bibliographic styles, : Note apa style requires biblatex-apa package installed LaTeX distribution.","code":"biblatexoptions:   - style=verbose-inote   - pageref=true biblatexoptions:   - citestyle=verbose-inote   - pageref=true   - bibstyle=apa"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"fonts","dir":"Articles","previous_headings":"","what":"Fonts","title":"LaTeX memoir Customization","text":"default font memoir Computer Modern (actually, update ), LaTeX standard. fonts may used: LaTeX font catalogue gallery. must installed LaTeX package, tex-gyre companion tex-gyre-math. provide updated versions classical: Times New Roman: Tex Gyre Termes Century Schoolbook: Tex Gyre Schola Palatino: Tex Gyre Pagella Helvetica: Tex Gyre Heros Courier: Tex Gyre Cursor Bookman Old Style: Tex Gyre Bonum Avant Garde Gothic: Tex Gyre Adventor Zapf Chancery: Tex Gyre Chorus LaTeX packages must installed LaTeX distribution. tinytex installed , can : command must added GitHub Action script created build_ghworkflow(), just tinytex::install_tinytex(). build_ghworkflow() automatically recognizes font, see . fonts declared header index.Rmd. XeLaTeX able find fonts name installed system level, namely installed packages. must declared file names, general names without spaces, lower case. main font options allow building actual file names likely changed. math font name fully specified, options. monotype font may declared used code blocks, code included text. may monofont: texgyrecursor, completed identical monofontoptions list, default font usually better. Note long tables (longtable = TRUE argument kbl() function render tables) may cut correctly across pages specific fonts declared. font size 12pt default. Change necessary, depending font type, margin width personal preferences.","code":"tinytex::tlmgr_install(c(\"tex-gyre\", \"tex-gyre-math\")) mainfont: texgyretermes mainfontoptions:   - Extension=.otf   - UprightFont=*-regular   - BoldFont=*-bold   - BoldItalicFont=*-bolditalic   - ItalicFont=*-italic mathfont: texgyretermes-math.otf"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"github-actions-workflow","dir":"Articles","previous_headings":"","what":"GitHub Actions workflow","title":"LaTeX memoir Customization","text":"memoir can produced GitHub Actions made visible GitHub Pages memoir.yml script (.github\\workflows) created build_ghworklow(). script installs tinytex, low-weight TeXLive distribution, tinytex R package. Neither additional fonts language support beyond English installed default. build_ghworklow() adds necessary commands script (basically, install LaTeX packages) reading fonts languages options header document recognizing LaTeX packages need. Support necessarily limited. Supported languages fonts listed . ones can used memoir, memoir.yml script edited manually allow GitHub Actions work properly.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"supported-languages","dir":"Articles","previous_headings":"GitHub Actions workflow","what":"Supported languages","title":"LaTeX memoir Customization","text":"hyphenation pattern language must installed LaTeX distribution. , text just hyphenated. Supported languages : de: German, fr: French, : Italian, pt: Portuguese, sp: Spanish. English supported natively.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"supported-fonts","dir":"Articles","previous_headings":"GitHub Actions workflow","what":"Supported fonts","title":"LaTeX memoir Customization","text":"Font file names used find corresponding package install . instance, mainfont: texgyretermes, fonts whose name starts texgyre needs tex-gyre LaTeX package. Supported font families listed name (file name pattern) LaTeX package: DejaVu (dejavu*): dejavu-otf Garamond (GaramondLibre*): garamond-libre Garamond Math (Garamond-Math*): garamond-math KP-fonts (kp*): kpfonts-otf Libertine (LinBiolinum*, LinLibertine*): libertine TeX Gyre (texgyre*): tex-gyre TeX Gyre Math (texgyre-math*): tex-gyre-math","code":""},{"path":[]},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"basic-use-1","dir":"Articles","previous_headings":"Paper and stock size","what":"Basic use","title":"LaTeX memoir Customization","text":"paper size chosen papersize option. Common values “A4” “Letter”, many sizes allowed LaTeX package memoir. listed tables 1.1 1.3 manual. Note “paper” suffix added automatically must typed: select “a3paper”, just type “a3” “A3”. paper size (area document printed ) also stock size (size piece paper printer accepts).","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"advanced-use-1","dir":"Articles","previous_headings":"Paper and stock size","what":"Advanced use","title":"LaTeX memoir Customization","text":"desired paper size stock, LaTeX allows selecting different values. papersize option actually selects size stock. use smaller paper size fits stock, e.g. octavo (9 x 6 inches) paper A4 stock, following commands must added latex/preamble.tex: trimmed size final document: , octavo size. stock trimmed right bottom useful paper area top left stock default. \\settrims command adds trims left top sizes. index.Rmd, set paper stock A4 add class option showtrims trim marks visible printed document. printed paper show trim marks like :","code":"\\settrimmedsize{9in}{6in}{*} \\settrims{1in}{1in} classoption:   - showtrims"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/customize.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"LaTeX memoir Customization","text":"Large margins optimal companion style verbose-inote bibliographic style; small margins used default options template. Much memoir customization offered template choosing styles, possibly fonts. needed, LaTeX code may added latex/preamble.tex, latex/template.tex modified.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/figures.html","id":"layouts","dir":"Articles","previous_headings":"","what":"Layouts","title":"Figures in memoirs with large margins","text":"copy page three types figures illustrates differences.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/figures.html","id":"syntax","dir":"Articles","previous_headings":"","what":"Syntax","title":"Figures in memoirs with large margins","text":"Default figures declared code chunks contain appropriate code: plot(), ggplot() include_graphics(). chunk header contains figure caption , better, reference . referenced caption, declared outside chunk (ref:chunk_label), allows text formats contents. limit must single paragraph.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/figures.html","id":"standard-figure","dir":"Articles","previous_headings":"Syntax","what":"Standard figure","title":"Figures in memoirs with large margins","text":"code produces standard figure.","code":"(ref:pressure1) Standard figure ```{r pressure1, fig.cap=\"(ref:pressure1)\", echo=FALSE} plot(pressure) ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/figures.html","id":"margin-figure","dir":"Articles","previous_headings":"Syntax","what":"Margin figure","title":"Figures in memoirs with large margins","text":"margin figure obtained changing figure environment (fig.env='marginfigure') code chunk options.","code":"(ref:pressure2) Margin figure ```{r pressure2, fig.cap=\"(ref:pressure2)\", fig.env='marginfigure', echo=FALSE} plot(pressure) ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/figures.html","id":"full-width-figure","dir":"Articles","previous_headings":"Syntax","what":"Full-width figure","title":"Figures in memoirs with large margins","text":"full-width figure obtained changing figure environment (fig.env='figure') width (.width='\\\\widthw'). figure must centered (fig.align='center'), default memoiR templates.","code":"(ref:pressure3) Full-width figure ```{r pressure3, fig.cap=\"(ref:pressure3)\", fig.env='figure', out.width='\\\\widthw', echo=FALSE} plot(pressure) ```"},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/memoiR.html","id":"content","dir":"Articles","previous_headings":"","what":"Content","title":"R Markdown and Bookdown Templates to Publish Documents","text":"package provides templates publish well-formatted documents HTML PDF formats. Documents can produced locally hosted GitHub, GitHub actions can update published documents continuously. Long documents main purpose package. Along GitBook Bootstrap 4 version read online, PDF version based LaTeX class memoir can highly customized (see examples 1 2). Functions provided make publication documents GitHub easy, including continuous integration. Templates include: “Memoir”: book template based memoir. HTML version GitBook Bootstap 4 book PDF version formatted memoir LaTeX template. “Stylish Article”: article self archiving. HTML versions optimized read online PDF version two-column, well formatted article printed. “Simple Article”: simpler stylish article. HTML versions PDF version follows classical ‘article’ LaTeX template. “Beamer Slideshow”: HTML version either IOSlide Slidy PDF version Beamer slideshow. Available HTML formats articles : GitBook: bookdown::gitbook Bookdown’s HTML format (bookdown::html_document2) format rmdformats package. rmdformats::downcute default. See package documentation possibilities. distill article distill package (base_format: distill::distill_article option bookdown::html_document2).","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/memoiR.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"R Markdown and Bookdown Templates to Publish Documents","text":"RStudio, either: Use menu “File > New File… > R Markdown…”, click template pick template want list. Choose location create document name directory. Make new folder RStudio Project: use menu “File / New Project…”, click “Existing Directory” select directory created previously. Use menu “File > New Project > New Directory > Document Project using memoiR”. Chose location create document name directory. Choose document type list. Articles slideshows produced clicking Knit button Source pane Rmd file. Memoirs produced clicking Build Book button Build pane. Push project GitHub activate GitHub Pages make documents readable online. following functions help simplify task: build_gitignore() create .gitignore file. Activate git source control . build_readme() create README.md file, GitHub Pages index articles slideshows. build_githubpages() move knitted documents (articles slideshows) docs folder. Documents can knitted GitHub Action continuous integration activated: EMAIL: email address author, GH-PAT: valid Personal Access Token. run build_ghworkflow() create necessary script (.github/workflows/check.yml).","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/memoiR.html","id":"credits","dir":"Articles","previous_headings":"","what":"Credits","title":"R Markdown and Bookdown Templates to Publish Documents","text":"feather memoiR package sticker Wikimedia license CC -SA 3.0. memoir LaTeX package CTAN. Stylish Article template adapted LaTeX Templates, turn adapted LaTeX class Mathias Legrand. licence CC -NC-SA 3.0.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/memoiR.html","id":"full-documentation","dir":"Articles","previous_headings":"","what":"Full documentation","title":"R Markdown and Bookdown Templates to Publish Documents","text":"https://EricMarcon.github.io/memoiR/","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/upgrade.html","id":"create-a-new-project","dir":"Articles","previous_headings":"","what":"Create a new project","title":"Upgrade a Project","text":"simplest solution consists creating new project scratch updated version package. , copy paste content old project: memoir chapters (.Rmd files) text index.Rmd files memoirs, text .Rmd files article presentation projects yaml headers .Rmd files: contain parameters project (title, language…) Run commands : build_gitignore() build .gitignore file, build_ghworkflow() activate continuous integration, build_readme() README.md file.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/upgrade.html","id":"upgrade-the-helper-files-of-an-existing-project","dir":"Articles","previous_headings":"","what":"Upgrade the helper files of an existing project","title":"Upgrade a Project","text":"alternative strategy, existing project modified assess new helper files package. Create new project type project upgrade, e.g. “Stylish Article”. Copy files new project folder old one: replace content latex folder (overwrite changes preamble.tex, before_body.tex after_body.tex). upgrade .css files. add new file exist old project, e.g. bs4_style.css allow Bootstrap 4 style memoirs.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/articles/upgrade.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Upgrade a Project","text":"Existing document projects can upgraded benefit new features recent memoiR version, price copying new files package. Changes modified files, e.g. new options yaml header existing .Rmd file require comparing new old file structures updating new files line line.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Marcon. Author, maintainer.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marcon E (2024). memoiR: R Markdown Bookdown Templates Publish Documents. R package version 1.2-10.9001, https://github.com/EricMarcon/memoiR/, https://ericmarcon.github.io/memoiR/.","code":"@Manual{,   title = {memoiR: R Markdown and Bookdown Templates to Publish Documents},   author = {Eric Marcon},   year = {2024},   note = {R package version 1.2-10.9001, https://github.com/EricMarcon/memoiR/},   url = {https://ericmarcon.github.io/memoiR/}, }"},{"path":"https://EricMarcon.github.io/memoiR/dev/index.html","id":"memoir-","dir":"","previous_headings":"","what":"R Markdown and Bookdown Templates to Publish Documents","title":"R Markdown and Bookdown Templates to Publish Documents","text":"Templates publish well-formatted documents HTML PDF formats. Gallery: HTML GitBook HTML Bootstrap 4 book PDF, small-margin layout PDF, wide-margin layout HTML Document Downcute HTML distill article format Stylish Article default, available . HTML Gitbook format similar memoir template PDF PDF distill HTML outputs identical Simple Article. HTML IOSlide HTML Slidy PDF (Beamer) quick introduction vignette(\"memoiR\"). development version documentation available .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/Knit.html","id":null,"dir":"Reference","previous_headings":"","what":"Knit — Knit","title":"Knit — Knit","text":"Create documents templates","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/Knit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knit — Knit","text":"","code":"knit_all(destination = usethis::proj_path(\"docs\"), gallery = \"gallery\")  knit_template(   template,   output_format,   destination = usethis::proj_path(\"docs\"),   gallery = \"gallery\" )"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/Knit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knit — Knit","text":"destination name folder containing GitHub pages equivalent. gallery name subfolder destination store knitted documents. template name template knit, e.g. \"simple_article\". output_format character vector output formats convert . value must name function producing output format object, \"bookdown::pdf_book\".","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/Knit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Knit — Knit","text":"TRUE documents knitted copied gallery, invisibly.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/Knit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Knit — Knit","text":"functions used test templates produce gallery. knit_template() produces HTML PDF output chosen template. knit_all() runs knit_template() templates package. output_format argument selects way templates rendered: articles may rendered HTML bookdown::html_document2, bookdown::gitbook, rmdformats::downcute (others, see package rmdformats) PDF bookdown::pdf_book. books may rendered HTML bookdown::gitbook bookdown::bs4_book PDF bookdown::pdf_book. slides may rendered  HTML bookdown::slidy_presentation2, bookdown::ioslides_presentation2 PDF bookdown::beamer_presentation2. functions mainly used test documentation purposes. projects based templates, use Knit button (articles, presentations) Build Book button (memoirs) bookdown::render_book().","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Add fonts — add_font","title":"Add fonts — add_font","text":"function called build_ghworkflow() install fonts.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add fonts — add_font","text":"","code":"add_font(font)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add fonts — add_font","text":"font font file name","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add fonts — add_font","text":"line GitHub Actions script install font package. NULL font recognized.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_hyphen.html","id":null,"dir":"Reference","previous_headings":"","what":"Add hyphenation patterns — add_hyphen","title":"Add hyphenation patterns — add_hyphen","text":"function called build_ghworkflow() install hyphenation patterns.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_hyphen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add hyphenation patterns — add_hyphen","text":"","code":"add_hyphen(lang)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_hyphen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add hyphenation patterns — add_hyphen","text":"lang language code, \"fr-FR\"","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/add_hyphen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add hyphenation patterns — add_hyphen","text":"line GitHub Actions script install hyphenation package. NULL lang recognized.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_ghworkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Build GitHub Action Workflow — build_ghworkflow","title":"Build GitHub Action Workflow — build_ghworkflow","text":"Build YAML file (.gihub/workflows/memoir.yml) knit documents project GitHub Pages. workflow knits R Markdown files according header: output formats produced stored gh-pages branch project.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_ghworkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build GitHub Action Workflow — build_ghworkflow","text":"","code":"build_ghworkflow()"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_ghworkflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build GitHub Action Workflow — build_ghworkflow","text":"content YAML file vector characters, invisibly. element line file.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_ghworkflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build GitHub Action Workflow — build_ghworkflow","text":"HTML outputs name last one knitted overwrites previous ones. Keep one HTML format header RMarkdown file. DESCRIPTION file necessary project install packages. must declared options code chunk .Rmd file (index.Rmd memoir template). Two secrets must stored GitHub account: GH_PAT: valid access token, EMAIL: email address send workflow results .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_ghworkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build GitHub Action Workflow — build_ghworkflow","text":"","code":"## Simulate the creation of a new project # Save working directory original_wd <- getwd() # Get a temporary working directory wd <- tempfile(\"example\") # Simulate File > New File > R Markdown... > From Template > Simple Article rmarkdown::draft(wd, template=\"simple_article\", package=\"memoiR\", edit=FALSE) # Go to temp directory setwd(wd) # Make it the current project usethis::proj_set(path = \".\", force = TRUE) #> ✔ Setting active project to #>   \"/private/var/folders/g6/rgtlsw6n123b0gt5483s5_cm0000gn/T/RtmpPtDnCO/example22c47e41b758\".  # Build GitHub Actions Workflow script build_ghworkflow() #> ✔ Writing .github/workflows/memoir.yml. # Content readLines(\".github/workflows/memoir.yml\") #>  [1] \"on:\"                                                                                                #>  [2] \"  push:\"                                                                                            #>  [3] \"   branches:\"                                                                                       #>  [4] \"     - [main, master]\"                                                                              #>  [5] \"\"                                                                                                   #>  [6] \"name: rmarkdown\"                                                                                    #>  [7] \"\"                                                                                                   #>  [8] \"jobs:\"                                                                                              #>  [9] \"  render:\"                                                                                          #> [10] \"    runs-on: macOS-latest\"                                                                          #> [11] \"    steps:\"                                                                                         #> [12] \"      - name: Checkout repo\"                                                                        #> [13] \"        uses: actions/checkout@v4\"                                                                  #> [14] \"      - name: Setup R\"                                                                              #> [15] \"        uses: r-lib/actions/setup-r@v2\"                                                             #> [16] \"      - name: Install pandoc\"                                                                       #> [17] \"        uses: r-lib/actions/setup-pandoc@v2\"                                                        #> [18] \"      - name: Install dependencies\"                                                                 #> [19] \"        env:\"                                                                                       #> [20] \"          GITHUB_PAT: ${{ secrets.GH_PAT }}\"                                                        #> [21] \"        run: |\"                                                                                     #> [22] \"          options(pkgType = \\\"binary\\\")\"                                                            #> [23] \"          options(install.packages.check.source = \\\"no\\\")\"                                          #> [24] \"          install.packages(c(\\\"distill\\\", \\\"downlit\\\", \\\"memoiR\\\", \\\"rmdformats\\\", \\\"tinytex\\\"))\"   #> [25] \"          tinytex::install_tinytex(bundle = \\\"TinyTeX\\\")\"                                           #> [26] \"          tinytex::tlmgr_install(\\\"hyphen-french\\\")\"                                                #> [27] \"          tinytex::tlmgr_install(\\\"hyphen-italian\\\")\"                                               #> [28] \"        shell: Rscript {0}\"                                                                         #> [29] \"      - name: Render Rmarkdown files\"                                                               #> [30] \"        env:\"                                                                                       #> [31] \"          GITHUB_PAT: ${{ secrets.GH_PAT }}\"                                                        #> [32] \"        run: |\"                                                                                     #> [33] \"          Sys.setlocale(\\\"LC_TIME\\\", \\\"en_US\\\")\"                                                    #> [34] \"          lapply(list.files(pattern = \\\"*.Rmd\\\"), function(file) rmarkdown::render(file, \\\"all\\\"))\" #> [35] \"          memoiR::build_githubpages()\"                                                              #> [36] \"        shell: Rscript {0}\"                                                                         #> [37] \"      - name: Upload artifact\"                                                                      #> [38] \"        uses: actions/upload-artifact@v4\"                                                           #> [39] \"        with:\"                                                                                      #> [40] \"          name: ghpages\"                                                                            #> [41] \"          path: docs\"                                                                               #> [42] \"  checkout-and-deploy:\"                                                                             #> [43] \"    runs-on: ubuntu-latest\"                                                                         #> [44] \"    needs: render\"                                                                                  #> [45] \"    permissions:\"                                                                                   #> [46] \"      contents: write\"                                                                              #> [47] \"    steps:\"                                                                                         #> [48] \"      - name: Download artifact\"                                                                    #> [49] \"        uses: actions/download-artifact@v4\"                                                         #> [50] \"        with:\"                                                                                      #> [51] \"          name: ghpages\"                                                                            #> [52] \"          path: docs\"                                                                               #> [53] \"      - name: Deploy to GitHub Pages\"                                                               #> [54] \"        uses: Cecilapp/GitHub-Pages-deploy@v3\"                                                      #> [55] \"        env:\"                                                                                       #> [56] \"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"                                                #> [57] \"        with:\"                                                                                      #> [58] \"          email: ${{ secrets.EMAIL }}\"                                                              #> [59] \"          build_dir: docs\"                                                                          #> [60] \"          jekyll: yes\"                                                                               ## End of the example: cleanup # Return to the original working directory and clean up setwd(original_wd) unlink(wd, recursive = TRUE)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":null,"dir":"Reference","previous_headings":"","what":"Build GitHub Pages — build_githubpages","title":"Build GitHub Pages — build_githubpages","text":"Copy files produced knitting destination folder.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build GitHub Pages — build_githubpages","text":"","code":"build_githubpages(destination = usethis::proj_path(\"docs\"))"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build GitHub Pages — build_githubpages","text":"destination destination folder knitted documents.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build GitHub Pages — build_githubpages","text":"vector names files directory copied existed (may knitted), invisibly.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build GitHub Pages — build_githubpages","text":"Produced files HTML pages companions (css, figures, libraries) PDF documents. function moves README.md file destination folder. GitHub Pages allow making website present : README.md home page. Make build_readme() links HTML PDF outputs. knit HTML PDF versions avoid dead links. run build_githubpages() document knitted move outputs docs folder. push GitHub activate GitHub Pages main branch docs folder. function useless book projects: Build Book (.e. bookdown::render_book() function) takes care every step.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_githubpages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build GitHub Pages — build_githubpages","text":"","code":"if (FALSE) { # \\dontrun{ ## Simulate the creation of a new project # Save working directory original_wd <- getwd() # Get a temporary working directory wd <- tempfile(\"example\") # Simulate File > New File > R Markdown... > From Template > Simple Article rmarkdown::draft(wd, template=\"simple_article\", package=\"memoiR\", edit=FALSE) # Go to temp directory setwd(wd) # Make it the current project usethis::proj_set(path = \".\", force = TRUE)  ## Sequence of actions to build a complete project # Build .gitignore build_gitignore() ## Activate source control, edit your files, commit # Build README, link to HTML output only in this example build_readme(PDF = FALSE) # render: knit to HTML Document (interactively: click the Knit button) rmarkdown::render(input = list.files(pattern = \"*.Rmd\"),                    output_format = \"bookdown::html_document2\") # Build GitHub Pages build_githubpages() # List the GitHub Pages files setwd(\"docs\") list.files(recursive = TRUE) ## Commit and push. Outputs will be in /docs of the master branch.  ## End of the example: cleanup # Return to the original working directory and clean up setwd(original_wd) unlink(wd, recursive = TRUE) } # }"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_gitignore.html","id":null,"dir":"Reference","previous_headings":"","what":"Build .gitignore — build_gitignore","title":"Build .gitignore — build_gitignore","text":"Build .gitignore file suitable R Markdown projects.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_gitignore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build .gitignore — build_gitignore","text":"","code":"build_gitignore()"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_gitignore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build .gitignore — build_gitignore","text":"content .gitignore file vector characters, invisibly. element line file.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_gitignore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build .gitignore — build_gitignore","text":".gitignore file contains list files (file name patterns) must controlled git. Run function project created memoiR template, activating version control.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_gitignore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build .gitignore — build_gitignore","text":"","code":"## Simulate the creation of a new project # Save working directory original_wd <- getwd() # Get a temporary working directory wd <- tempfile(\"example\") # Simulate File > New File > R Markdown... > From Template > Simple Article rmarkdown::draft(wd, template=\"simple_article\", package=\"memoiR\", edit=FALSE) # Go to temp directory setwd(wd) # Make it the current project usethis::proj_set(path = \".\", force = TRUE) #> ✔ Setting active project to #>   \"/private/var/folders/g6/rgtlsw6n123b0gt5483s5_cm0000gn/T/RtmpPtDnCO/example22c41eb6ae00\".  # Build .gitignore file build_gitignore() #> ✔ Writing .gitignore. # Content readLines(\".gitignore\") #>  [1] \"# History files\"                                  #>  [2] \".Rhistory\"                                        #>  [3] \".Rapp.history\"                                    #>  [4] \"# Session Data files\"                             #>  [5] \".RData\"                                           #>  [6] \"# Package file\"                                   #>  [7] \".Rbuildignore\"                                    #>  [8] \"# RStudio files\"                                  #>  [9] \".Rproj.user/\"                                     #> [10] \"\"                                                 #> [11] \"# knitr and R markdown default cache directories\" #> [12] \"/*_files/\"                                        #> [13] \"/*_cache/\"                                        #> [14] \"/libs/\"                                           #> [15] \"\"                                                 #> [16] \"# Latex files\"                                    #> [17] \"*.aux\"                                            #> [18] \"*-blx.bib\"                                        #> [19] \"*.log\"                                            #> [20] \"*.xml\"                                            #> [21] \"*.bbl\"                                            #> [22] \"*.bcf\"                                            #> [23] \"*.blg\"                                            #> [24] \"*.synctex.gz\"                                     #> [25] \"*.out\"                                            #> [26] \"*.toc\"                                            #> [27] \"*-concordance.tex\"                                #> [28] \"*(busy)\"                                          #> [29] \"*.nav\"                                            #> [30] \"*.snm\"                                            #> [31] \"*.vrb\"                                            #> [32] \"\"                                                 #> [33] \"# Template specific\"                              #> [34] \"packages.bib\"                                     #> [35] \"\"                                                 #> [36] \"# Uncomment if CI builds docs/\"                   #> [37] \"# docs/\"                                           ## End of the example: cleanup # Return to the original working directory and clean up setwd(original_wd) unlink(wd, recursive = TRUE)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Build README — build_readme","title":"Build README — build_readme","text":"Build README.md file used index GitHub Pages.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build README — build_readme","text":"","code":"build_readme(PDF = TRUE)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build README — build_readme","text":"PDF TRUE (default), link PDF output added.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build README — build_readme","text":"content README.md file vector characters, invisibly. element line file.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build README — build_readme","text":"R Markdown files project used get title abstract published documents. Run function project created memoiR template, build_githubpages(). link HTML , optionally, PDF versions added. Metadata fields read .Rmd files YAML header: title, abstract URL.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/build_readme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build README — build_readme","text":"","code":"## Simulate the creation of a new project # Save working directory original_wd <- getwd() # Get a temporary working directory wd <- tempfile(\"example\") # Simulate File > New File > R Markdown... > From Template > Simple Article rmarkdown::draft(wd, template=\"simple_article\", package=\"memoiR\", edit=FALSE) # Go to temp directory setwd(wd) # Make it the current project usethis::proj_set(path = \".\", force = TRUE) #> ✔ Setting active project to #>   \"/private/var/folders/g6/rgtlsw6n123b0gt5483s5_cm0000gn/T/RtmpPtDnCO/example22c4299d8b1f\".  # Build README.md file build_readme() #> ✔ Writing README.md. # Content readLines(\"README.md\") #>  [1] \"# Title of the Article\"                                                   #>  [2] \"\"                                                                         #>  [3] \"Abstract of the article.\"                                                 #>  [4] \"\"                                                                         #>  [5] \"Formats:\"                                                                 #>  [6] \"\"                                                                         #>  [7] \"- [HTML](https://GitHubID.github.io/Repository/example22c4299d8b1f.html)\" #>  [8] \"- [PDF](https://GitHubID.github.io/Repository/example22c4299d8b1f.pdf)\"   #>  [9] \"\"                                                                         #> [10] \"\"                                                                         #> [11] \"\"                                                                          ## End of the example: cleanup # Return to the original working directory and clean up setwd(original_wd) unlink(wd, recursive = TRUE)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/draft_memoir.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio Project — draft_memoir","title":"RStudio Project — draft_memoir","text":"function run RStudio project wizard create new document project.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/draft_memoir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio Project — draft_memoir","text":"","code":"draft_memoir(path, ...)"},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/draft_memoir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio Project — draft_memoir","text":"path path newly created project ... extra arguments passed New Project Wizard","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/draft_memoir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RStudio Project — draft_memoir","text":"Used side effects.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/memoiR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"memoiR: R Markdown and Bookdown Templates to Publish Documents — memoiR-package","title":"memoiR: R Markdown and Bookdown Templates to Publish Documents — memoiR-package","text":"Producing high-quality documents suitable publication directly R made possible R Markdown ecosystem. 'memoiR' makes easy. provides templates knit memoirs, articles slideshows helpers publish documents GitHub Pages activate continuous integration.","code":""},{"path":[]},{"path":"https://EricMarcon.github.io/memoiR/dev/reference/memoiR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"memoiR: R Markdown and Bookdown Templates to Publish Documents — memoiR-package","text":"Maintainer: Eric Marcon eric.marcon@agroparistech.fr (ORCID)","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-109001","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-10.9001","title":"memoiR 1.2-10.9001","text":"added “main” branch name build_ghworkflow()","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-10","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-10","title":"memoiR 1.2-10","text":"CRAN release: 2024-10-15","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-10","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-10","text":"updated Cecilapp/GitHub-Pages-deploy action version v3 new syntax build_ghworkflow(). fixed URL format DESCRIPTION. updated upload/download-artifact action version v4.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-9","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-9","title":"memoiR 1.2-9","text":"CRAN release: 2024-04-22","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-9","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-9","text":"kableExtra::kbl() preferred knitr::kable() format tables kableExtra v.1.4.0 (kableExtra issue #831).","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-7","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-7","title":"memoiR 1.2-7","text":"CRAN release: 2024-02-26","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-7","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-7","text":"useless checkout step deploying documents GH pages CI deleted. Documentation tables improved templates. Chunk options format updated. urlcolor: blue default stylish articles.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-4","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-4","title":"memoiR 1.2-4","text":"CRAN release: 2023-09-14","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"external-changes-1-2-4","dir":"Changelog","previous_headings":"","what":"External changes","title":"memoiR 1.2-4","text":"codecov.io URL README.md. Github actions versions updated. Pending issue kableExtra.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"bug-correction-1-2-4","dir":"Changelog","previous_headings":"","what":"Bug Correction","title":"memoiR 1.2-4","text":"Updated package help file following roxygen2 v.7 breaking change.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-2","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-2","title":"memoiR 1.2-2","text":"CRAN release: 2022-09-23","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-2","text":"output format libraries now installed memoiR.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-1","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-1","title":"memoiR 1.2-1","text":"CRAN release: 2022-08-14","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-1","text":"Local tocs PDF memoirs. Localized quotes PDF. urlcolor: blue available templates. logo epigraph PDF output memoirs now declared YAML header. Colored text blocks memoirs. See template’s documentation.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-12-0","dir":"Changelog","previous_headings":"","what":"memoiR 1.2-0","title":"memoiR 1.2-0","text":"CRAN release: 2022-07-10","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.2-0","text":"Full-width figures supported memoirs. bs4_book css added memoir template support Summary block style. Date format localized build_ghworkflow(). distill format allowed HTML articles. Better prevention overfull lines PDF articles.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"bug-correction-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug Correction","title":"memoiR 1.2-0","text":"article templates, check lang declared selecting .","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-11-4","dir":"Changelog","previous_headings":"","what":"memoiR 1.1-4","title":"memoiR 1.1-4","text":"CRAN release: 2022-01-20","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"bug-correction-1-1-4","dir":"Changelog","previous_headings":"","what":"Bug Correction","title":"memoiR 1.1-4","text":"templates, knitr message option spelled messages. Corrected.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"new-features-1-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"memoiR 1.1-4","text":"urlcolor: blue beamer presentations.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"improvements-1-1-4","dir":"Changelog","previous_headings":"","what":"Improvements","title":"memoiR 1.1-4","text":"r-lib/actions v2 build_ghworkflow().","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-11-3","dir":"Changelog","previous_headings":"","what":"memoiR 1.1-3","title":"memoiR 1.1-3","text":"CRAN release: 2021-11-13","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"bug-correction-1-1-3","dir":"Changelog","previous_headings":"","what":"Bug Correction","title":"memoiR 1.1-3","text":"Italic fonts declared default memoir headers.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"new-features-1-1-3","dir":"Changelog","previous_headings":"","what":"New features","title":"memoiR 1.1-3","text":"Bootstrap 4 HTML output available memoirs. Double space line numbers PDF Simple Articles documented. Font size table contents depth can changed PDF articles. options headers: message: false code chunks longbibliography: false memoirs","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-11-2","dir":"Changelog","previous_headings":"","what":"memoiR 1.1-2","title":"memoiR 1.1-2","text":"CRAN release: 2021-09-03","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"bug-correction-1-1-2","dir":"Changelog","previous_headings":"","what":"Bug Correction","title":"memoiR 1.1-2","text":"build_ghworkflow() failed font declared memoir header.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-11-0","dir":"Changelog","previous_headings":"","what":"memoiR 1.1-0","title":"memoiR 1.1-0","text":"CRAN release: 2021-07-26","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"memoiR 1.1-0","text":"Logo last page memoirs optional (delete cover-image: header). Paper Stock sizes may different Memoir. See customization article.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-10-0","dir":"Changelog","previous_headings":"","what":"memoiR 1.0-0","title":"memoiR 1.0-0","text":"CRAN release: 2021-06-07","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"memoiR 1.0-0","text":"New Project wizard RStudio. Customization memoirs.","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"memoir-05-0","dir":"Changelog","previous_headings":"","what":"memoiR 0.5-0","title":"memoiR 0.5-0","text":"CRAN release: 2021-05-11","code":""},{"path":"https://EricMarcon.github.io/memoiR/dev/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"memoiR 0.5-0","text":"Simple article, Stylish article, Memoir Beamer templates. XeLaTex polyglossia templates. Function build GitHub Pages knitted documents. Functions build .gitignore, README.md GitHub Actions workflow.","code":""}]
